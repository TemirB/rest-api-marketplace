// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package post is a generated GoMock package.
package post

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *Mockservice) CreatePost(post *Post) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockserviceMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*Mockservice)(nil).CreatePost), post)
}

// DeletePost mocks base method.
func (m *Mockservice) DeletePost(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockserviceMockRecorder) DeletePost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*Mockservice)(nil).DeletePost), id)
}

// GetPostByID mocks base method.
func (m *Mockservice) GetPostByID(id uint) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", id)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockserviceMockRecorder) GetPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*Mockservice)(nil).GetPostByID), id)
}

// GetPosts mocks base method.
func (m *Mockservice) GetPosts(sort *SortParams, filter *FilterParams) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", sort, filter)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockserviceMockRecorder) GetPosts(sort, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*Mockservice)(nil).GetPosts), sort, filter)
}

// UpdatePost mocks base method.
func (m *Mockservice) UpdatePost(post *Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockserviceMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*Mockservice)(nil).UpdatePost), post)
}
